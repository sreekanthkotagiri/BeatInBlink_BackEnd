"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const auth_controller_1 = require("../controllers/auth.controller");
const auth_middleware_1 = require("../middleware/auth.middleware");
const student_auth_controller_1 = require("../controllers/student.auth.controller");
const guest_controller_1 = require("../controllers/guest.controller");
const router = express_1.default.Router();
router.post('/login', auth_controller_1.loginUser);
router.post('/logout', auth_middleware_1.authenticateToken, auth_controller_1.logoutUser);
router.post('/refresh-token', auth_controller_1.refreshAccessToken);
router.get('/institute', auth_controller_1.getDashBoard);
router.post('/inst-register', auth_controller_1.instituteReg);
router.get('/institute/branches', auth_controller_1.getBranches);
router.post('/institute/create-branch', auth_controller_1.createBranch);
router.post('/institute/create-exam', auth_controller_1.createExam);
router.get('/institute/exams', auth_controller_1.getExams);
router.get('/institute/exams/:examId', auth_controller_1.getExamById);
router.get('/institute/viewexam/:examId', auth_controller_1.ViewExamById);
router.post('/institute/updateExam', auth_controller_1.updateExamById);
router.post('/institute/assign-exam-to-branches', auth_controller_1.assignExamToBranches);
router.post('/institute/assign-exam-to-students', auth_controller_1.assignExamToStudents);
router.get('/institute/allResults', auth_controller_1.getAllResults);
router.get('/institute/topPerformers', auth_controller_1.getTopPerformers);
router.get('/institute/student-report', auth_controller_1.getStudentReport);
router.get('/institute/exam-summary', auth_controller_1.getExamSummary);
router.get('/institute/search-exam', auth_controller_1.searchExams);
router.put('/institute/exams/:examId/lock-result', auth_controller_1.toggleResultLock);
router.get('/institute/announcements', auth_controller_1.getAllAnnouncements);
router.get('/institute/exam-assigned-branches', auth_controller_1.getAssignedBranchesForExam);
router.put('/institute/exams/:examId/enable', auth_controller_1.toggleExamStatus);
router.get('/institute/search-students', auth_controller_1.searchStudents);
router.get('/results', auth_middleware_1.authenticateToken, auth_controller_1.getResults);
router.post('/student/register', auth_controller_1.studentReg);
router.get('/student/getstudentwithsearch', student_auth_controller_1.getStudentWithSearch);
router.post('/student/updatestudent', auth_controller_1.updateStudent);
router.get('/student/profile', auth_controller_1.getStudentProfileById);
router.get('/student/exams', auth_controller_1.getStudentExams);
router.get('/student/results', student_auth_controller_1.studentResultById);
router.post('/institute/bulk-upload', auth_controller_1.bulkRegisterStudents);
router.post('/student/submit-exam', student_auth_controller_1.submitStudentExam);
router.get('/student/exams/:examId', auth_controller_1.getExamById);
router.get('/student/student-results', auth_controller_1.getStudentResults);
router.get('/student/:studentId/exams', auth_controller_1.getAllStudentExams);
router.get('/student/downloadExam', student_auth_controller_1.downloadSubmittedExam);
router.post('/guest/register', guest_controller_1.registerGuestUser);
router.post('/guest/createExam', guest_controller_1.createGuestExam);
router.get('/guest/getAllExam', guest_controller_1.getGuestExamsByGuestCode);
router.get('/guest/getExam/:examId', guest_controller_1.getGuestExamById);
router.post('/guest/submitExam', guest_controller_1.submitGuestExam);
router.get('/guest/getAllResults', guest_controller_1.getGuestExamResults);
router.get('/guest/downloadExam', guest_controller_1.downloadExam);
exports.default = router;
